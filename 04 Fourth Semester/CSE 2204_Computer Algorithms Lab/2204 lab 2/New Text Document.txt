Absolutely! I'll split the solutions into **separate C++ programs**, each solving exactly one problem with user interaction, no built-in functions, and the specified search method.

---

### Problem 1: Square Root using Binary Search

```cpp
#include <iostream>
using namespace std;

int sqrtBinarySearch(int n) {
    int low = 0, high = n, ans = 0;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        long long sq = (long long)mid * mid;
        if (sq <= n) {
            ans = mid;
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return ans;
}

int main() {
    int n;
    cout << "Enter a non-negative integer n: ";
    cin >> n;
    if (n < 0) {
        cout << "Input must be non-negative." << endl;
        return 1;
    }
    int result = sqrtBinarySearch(n);
    cout << "Largest integer x such that x^2 <= " << n << " is: " << result << endl;
    return 0;
}
```

---

### Problem 2: Search in Rotated Sorted Array using Binary Search

```cpp
#include <iostream>
using namespace std;

int searchRotated(int arr[], int size, int x) {
    int low = 0, high = size - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == x) return mid;
        if (arr[low] <= arr[mid]) {
            if (arr[low] <= x && x < arr[mid])
                high = mid - 1;
            else
                low = mid + 1;
        } else {
            if (arr[mid] < x && x <= arr[high])
                low = mid + 1;
            else
                high = mid - 1;
        }
    }
    return -1;
}

int main() {
    int size;
    cout << "Enter size of rotated sorted array: ";
    cin >> size;
    int arr[size];
    cout << "Enter " << size << " elements: ";
    for (int i = 0; i < size; i++) cin >> arr[i];
    int x;
    cout << "Enter target value to search: ";
    cin >> x;
    int idx = searchRotated(arr, size, x);
    cout << "Index of " << x << " is: " << idx << endl;
    return 0;
}
```

---

### Problem 3: Find Minimum in Rotated Sorted Array using Binary Search

```cpp
#include <iostream>
using namespace std;

int findMinRotated(int arr[], int size) {
    int low = 0, high = size - 1;
    while (low < high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] > arr[high])
            low = mid + 1;
        else
            high = mid;
    }
    return arr[low];
}

int main() {
    int size;
    cout << "Enter size of rotated sorted array: ";
    cin >> size;
    int arr[size];
    cout << "Enter " << size << " elements: ";
    for (int i = 0; i < size; i++) cin >> arr[i];
    int minVal = findMinRotated(arr, size);
    cout << "Minimum element in the array is: " << minVal << endl;
    return 0;
}
```

---

### Problem 4: Find First Occurrence using Linear Search

```cpp
#include <iostream>
using namespace std;

int firstOccurrence(int arr[], int size, int x) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == x)
            return i;
    }
    return -1;
}

int main() {
    int size;
    cout << "Enter size of array: ";
    cin >> size;
    int arr[size];
    cout << "Enter " << size << " elements: ";
    for (int i = 0; i < size; i++) cin >> arr[i];
    int x;
    cout << "Enter target value to find first occurrence: ";
    cin >> x;
    int idx = firstOccurrence(arr, size, x);
    cout << "First occurrence of " << x << " is at index: " << idx << endl;
    return 0;
}
```

---

### Problem 5: Find Maximum Element using Linear Search

```cpp
#include <iostream>
using namespace std;

int findMax(int arr[], int size) {
    int maxVal = arr[0];
    for (int i = 1; i < size; i++) {
        if (arr[i] > maxVal) {
            maxVal = arr[i];
        }
    }
    return maxVal;
}

int main() {
    int size;
    cout << "Enter size of array: ";
    cin >> size;
    int arr[size];
    cout << "Enter " << size << " elements: ";
    for (int i = 0; i < size; i++) cin >> arr[i];
    int maxVal = findMax(arr, size);
    cout << "Maximum element is: " << maxVal << endl;
    return 0;
}
```

---

### Problem 6: Count Occurrences of Target using Linear Search

```cpp
#include <iostream>
using namespace std;

int countOccurrences(int arr[], int size, int x) {
    int count = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] == x)
            count++;
    }
    return count;
}

int main() {
    int size;
    cout << "Enter size of array: ";
    cin >> size;
    int arr[size];
    cout << "Enter " << size << " elements: ";
    for (int i = 0; i < size; i++) cin >> arr[i];
    int x;
    cout << "Enter target value to count occurrences: ";
    cin >> x;
    int count = countOccurrences(arr, size, x);
    cout << x << " appears " << count << " times in the array." << endl;
    return 0;
}
```

---

If you want, I can help you put these into separate files or combine into one with a menu!
Just ask!
